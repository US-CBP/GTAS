# Logstash configuration for creating a simple
# MariaDB -> Logstash -> Elasticsearch pipeline.

input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://${MARIADB_HOST}:3306/gtas?sessionVariables=sql_mode=ANSI_QUOTES"
    jdbc_user => "${MARIADB_USER}"
    jdbc_password => "${MARIADB_PASSWORD}"
    sql_log_level => "debug"
    # jdbc_driver_library => "${LOGSTASH_LIB}/mariadb-java-client-2.3.0.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    statement_filepath => "${LOGSTASH_DIR}/config/cases_script.sql"
    schedule => "* * * * *"
    jdbc_paging_enabled => true
    jdbc_page_size => "10000"
    tracking_column_type => "numeric"
    use_column_value => true
    tracking_column => "ptd_id"
  }
}

filter {
  
  aggregate {
    task_id => "%{id}"
    code => "
      map['id'] = event.get('id')
 
      map['flight'] = {
        'id' => event.get('flight.id'),
        'eta_date' => event.get('flight.eta_date'),
        'etd' => event.get('flight.etd'),
        'eta' => event.get('flight.eta'),
        'etd_date' => event.get('flight.etd_date'),
        'flight_date' => event.get('flight.flight_date'),
        'flight_number' => event.get('flight.flight_number'),
        'full_flight_number' => event.get('flight.full_flight_number'),
        'origin' => event.get('flight.origin'),
        'origin_country' => event.get('flight.origin_country'),
        'rule_hit_count' => event.get('flight.rule_hit_count'),
        'passenger_count' => event.get('flight.passenger_count'),
        'direction' => event.get('flight.direction')
        
      }

       map['passenger'] = {
        'id' => event.get('passenger.paxid'),
        'age' => event.get('passenger.age'),
        'p_nationality' => event.get('passenger.nationality'),
        'debark_country' => event.get('passenger.debark_country'),
        'debarkation' => event.get('passenger.debarkation'),
        'passenger_debarkation_lon' => event.get('passenger.debarkation.lon'),
        'passenger_debarkation_lat' => event.get('passenger.debarkation.lat'),
        'passenger_embarkation_lon' => event.get('passenger.embarkation.lon'),
        'passenger_embarkation_lat' => event.get('passenger.embarkation.lat'),
        'dob' => event.get('passenger.dob'),
        'embark_country' => event.get('passenger.embark_country'),
        'embarkation' => event.get('passenger.embarkation'),
        'first_name' => event.get('passenger.first_name'),
        'last_name' => event.get('passenger.last_name'),
        'gender' => event.get('passenger.gender'),
        'middle_name' => event.get('passenger.middle_name'),
        'days_visa_valid' => event.get('passenger.days_visa_valid'),
        'passenger_type' => event.get('passenger.passenger_type'),
        'ref_number' => event.get('passenger.ref_number'),
        'residency_country' => event.get('passenger.residency_country'),
        'suffix' => event.get('passenger.suffix'),
        'travel_frequency' => event.get('passenger.travel_frequency'),
        'watchlistCheckTimestamp' => event.get('passenger.watchlistchecktimestamp'),
        'seatNumber' => event.get('passenger.seat_number'),
        'watchlist_match' => []
      }

      map['hit_disposition'] ||= []

      map['hit_summary'] ||= []

    event.cancel()
    "
    push_previous_map_as_event => true
    
    timeout => 5
    map_action => create_or_update
    timeout_tags => ["aggregate"]
  }


  if "aggregate" not in [tags] {
		drop{}
	}

  mutate {
    remove_field => [ 
      "@version","passenger.paxid","passenger.age","passenger.nationality","passenger.debark_country","passenger.debarkation","passenger.dob","passenger.embark_country","passenger.embarkation","passenger.first_name",
      "passenger.last_name","passenger.gender","passenger.middle_name","passenger.days_visa_valid","passenger.passenger_type","passenger.ref_number","passenger.residency_country","passenger.suffix","passenger.travel_frequency","passenger.watchlistchecktimestamp",
      "flight.id","flight.eta_date", "flight.etd", "flight.etd_date", "flight.flight_date", "flight.flight_number", "flight.full_flight_number", "flight.origin","flight.origin_country","flight.rule_hit_count","flight.passenger_count",
      "hit_disposition.created_at","hit_disposition.created_by","hit_disposition.updated_at","hit_disposition.updated_by","hit_disposition.description","hit_disposition.hit_id","hit_disposition.valid","hit_disposition.rule_cat_id","hit_disposition.status",
      "hit_disposition.comment.id", "hit_disposition.comment.hit_id","hit_disposition.comment.updated_by","hit_disposition.comment.created_at", "hit_disposition.comment.comments", "hit_disposition.comment.updated_at","tags","[passenger][p_nationality]"

    ]
    # add_field => {
    #   "[hit_disposition][comments]" => "comments"
    # }

  }

   if([passenger][passenger_debarkation_lon]){
      mutate {
        rename => {
        "[passenger][passenger_debarkation_lon]" => "[passenger][debarkation_coordination][lon]"
        }
      }
   }
    
    if([passenger][passenger_debarkation_lat]){
       mutate {
        rename => {
          "[passenger][passenger_debarkation_lat]" =>  "[passenger][debarkation_coordination][lat]"
        }
       }
    }

    if([passenger][passenger_embarkation_lon]){
       mutate {
        rename => {
          "[passenger][passenger_embarkation_lon]" => "[passenger][embarkation_coordination][lon]"
        }
       }
    }

    if([passenger][passenger_embarkation_lat]){
       mutate {
        rename => {
          "[passenger][passenger_embarkation_lat]" =>  "[passenger][embarkation_coordination][lat]"  
        }
       }
    }
}


output {

  elasticsearch {
    hosts => ["${ELASTIC_HOST}"]
    index => "case"
    action => "update"
    document_id => "%{id}"
    doc_as_upsert => true
    user => "elastic"
    password => "${ES_PASSWORD}"
    template => "${LOGSTASH_DIR}/config/cases_mapping.json"
    template_name => "case"
    template_overwrite => true
    ssl_certificate_verification => false
    ssl => true
  }

stdout {
   codec => rubydebug 
}

# stdout {
#    codec => json 
# }

}
