# Logstash configuration for creating a simple
# MariaDB -> Logstash -> Elasticsearch pipeline.

input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://localhost:3306/gtas?sessionVariables=sql_mode=ANSI_QUOTES"
    jdbc_user => "root"
    jdbc_password => "admin"
    sql_log_level => "debug"
    jdbc_driver_library => "./config/mariadb-java-client-2.3.0.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    statement_filepath => "./config/cases_script.sql"
    schedule => "* * * * *"
    jdbc_paging_enabled => true
    jdbc_page_size => "10000"
  }
}

filter {
  
  aggregate {
    task_id => "%{id}"
    code => "
      map['id'] = event.get('id')
      map['created_at'] = event.get('created_at')
      map['created_by'] = event.get('created_by')
      map['updated_at'] = event.get('updated_at')
      map['updated_by'] = event.get('updated_by')
      # map['citizenshipCountry'] = event.get('citizenshipCountry')
      map['description'] = event.get('description')
      map['disposition'] = event.get('disposition')
      map['dob'] = event.get('dob')
      map['document'] = event.get('document')
      map['firstName'] = event.get('firstname')
      # map['eta_date'] = event.get('eta_date')
      # map['etd_date'] = event.get('etd_date')
      map['flightId'] = event.get('flightid')
      map['flightNumber'] = event.get('flightnumber')
      map['highPriorityRuleCatId'] = event.get('highpriorityrulecatid')
      map['lastName'] = event.get('lastname')
      map['one_day_lookout_flag'] = event.get('one_day_lookout_flag')
      map['paxId'] = event.get('paxid')
      map['passengerName'] = event.get('passengername')
      map['passengerType'] = event.get('passengertype')
      map['status'] = event.get('status')
      

      map['flight'] = {
        'id' => event.get('flight.id'),
        'eta_date' => event.get('flight.eta_date'),
        'etd' => event.get('flight.etd'),
        'eta' => event.get('flight.eta'),
        'etd_date' => event.get('flight.etd_date'),
        'flight_date' => event.get('flight.flight_date'),
        'flight_number' => event.get('flight.flight_number'),
        'full_flight_number' => event.get('flight.full_flight_number'),
        'origin' => event.get('flight.origin'),
        'origin_country' => event.get('flight.origin_country'),
        'rule_hit_count' => event.get('flight.rule_hit_count'),
        'passenger_count' => event.get('flight.passenger_count'),
        'direction' => event.get('flight.direction')
        
      }

       map['passenger'] = {
        'id' => event.get('passenger.paxid'),
        'age' => event.get('passenger.age'),
        'p_citizenship_country' => event.get('passenger.citizenship_country'),
        'debark_country' => event.get('passenger.debark_country'),
        'debarkation' => event.get('passenger.debarkation'),
        'passenger_debarkation_lon' => event.get('passenger.debarkation.lon'),
        'passenger_debarkation_lat' => event.get('passenger.debarkation.lat'),
        'passenger_embarkation_lon' => event.get('passenger.embarkation.lon'),
        'passenger_embarkation_lat' => event.get('passenger.embarkation.lat'),
        'dob' => event.get('passenger.dob'),
        'embark_country' => event.get('passenger.embark_country'),
        'embarkation' => event.get('passenger.embarkation'),
        'first_name' => event.get('passenger.first_name'),
        'last_name' => event.get('passenger.last_name'),
        'gender' => event.get('passenger.gender'),
        'middle_name' => event.get('passenger.middle_name'),
        'days_visa_valid' => event.get('passenger.days_visa_valid'),
        'passenger_type' => event.get('passenger.passenger_type'),
        'ref_number' => event.get('passenger.ref_number'),
        'residency_country' => event.get('passenger.residency_country'),
        'suffix' => event.get('passenger.suffix'),
        'travel_frequency' => event.get('passenger.travel_frequency'),
        'watchlistCheckTimestamp' => event.get('passenger.watchlistchecktimestamp'),
        'seatNumber' => event.get('passenger.seat_number'),
        'watchlist_match' => []
      }

      map['hit_disposition'] ||= []
      
      map['hit_disposition'] << {
            'status' => event.get('hit_disposition.status'),
	          'created_at' => event.get('hit_disposition.created_at'),
	          'created_by' => event.get('hit_disposition.created_by'),
	          'updated_at' => event.get('hit_disposition.updated_at'),
	          'updated_by' => event.get('hit_disposition.updated_by'),
	          'description' => event.get('hit_disposition.description'),
	          'hit_id' => event.get('hit_disposition.hit_id'),
	          'valid' => event.get('hit_disposition.valid'),
	          'rule_cat_id' => event.get('hit_disposition.rule_cat_id'),
            'id' => event.get('hit_disposition.id'),
            'comments' => []
      }

      map['hit_disposition'].each do |dis|
      
        comment = {
          'comment' => event.get('hit_disposition.comment.comments'),
          'created_by' => event.get('hit_disposition.comment.created_by'),
          'id' => event.get('hit_disposition.comment.id'),
          'hit_disp_id' => event.get('hit_disposition.comment.hit_disp_id')
        }

        if(comment['hit_disp_id'] == dis['id'])
          dis['comments'].push(comment)
        end
      
      end


     if(event.get('pax_watchlist.id') != nil)
        watchlist_exists = map['passenger']['watchlist_match'].any? { |watchlist| watchlist['id'] == event.get('pax_watchlist.id')}

        if(!watchlist_exists)
          map['passenger']['watchlist_match'].push({
            'id' => event.get('pax_watchlist.id'),
            'last_run_timestamp' => event.get('pax_watchlist.last_run_timestamp'),
            'passenger_id' => event.get('pax_watchlist.passenger_id'),
            'percent_match' => event.get('pax_watchlist.percent_match'),
            'verified_status' => event.get('pax_watchlist.verified_status'),
            'watchlist_item_id' => event.get('pax_watchlist.watchlist_item_id')
          })
        end
      end

      map['hit_summary'] ||= []
      
      if(event.get('h_summary.id') != nil)
      hit_summary_exists = map['hit_summary'].any? { |element| element['id'] == event.get('h_summary.id') }

      if(!hit_summary_exists) 
        map['hit_summary'] << {
          'created_date' => event.get('h_summary_created_date'),
          'hit_type' => event.get('h_summary_hit_type'),
          'id' => event.get('h_summary.id'),
          'rule_hit_count' => event.get('h_summary_rule_hit_count'),
          'wl_hit_count' => event.get('h_summary_wl_hit_count'),
          'flight_id' => event.get('h_summary_flight_id'),
          'passenger_id' => event.get('h_summary_passenger_id'),
          'hit_detail' => []
        }
        end
      end
    
    if(event.get('h_detail.id') != nil)
      map['hit_summary'].each do |summary|
        hit_detail_exists = summary['hit_detail'].any? { |element| element['id'] == event.get('h_detail.id') }

        if(!hit_detail_exists)
          hit_detail = {
              'cond_text' => event.get('h_detail_cond_text'),
              'created_date' => event.get('h_detail_created_date'),
              'description' => event.get('h_detail_description'),
              'hit_type' => event.get('h_detail_hit_type'),
              'hits_summary_id' => event.get('h_detail_hits_summary_id'),
              'id' => event.get('h_detail.id'),
              'rule_id' => event.get('h_detail_rule_id'),
              'title' => event.get('h_detail_title')
          }

          summary['hit_detail'].push(hit_detail)

        end
      end
    end

    event.cancel()
    "
    push_previous_map_as_event => true
    
    timeout => 5
    map_action => create_or_update
    timeout_tags => ["aggregate"]
  }


  if "aggregate" not in [tags] {
		drop{}
	}

  mutate {
    remove_field => [ 
      "@version","passenger.paxid","passenger.age","passenger.citizenship_country","passenger.debark_country","passenger.debarkation","passenger.dob","passenger.embark_country","passenger.embarkation","passenger.first_name",
      "passenger.last_name","passenger.gender","passenger.middle_name","passenger.days_visa_valid","passenger.passenger_type","passenger.ref_number","passenger.residency_country","passenger.suffix","passenger.travel_frequency","passenger.watchlistchecktimestamp",
      "flight.id","flight.eta_date", "flight.etd", "flight.etd_date", "flight.flight_date", "flight.flight_number", "flight.full_flight_number", "flight.origin","flight.origin_country","flight.rule_hit_count","flight.passenger_count",
      "hit_disposition.created_at","hit_disposition.created_by","hit_disposition.updated_at","hit_disposition.updated_by","hit_disposition.description","hit_disposition.hit_id","hit_disposition.valid","hit_disposition.rule_cat_id","hit_disposition.status",
      "hit_disposition.comment.id", "hit_disposition.comment.hit_id","hit_disposition.comment.updated_by","hit_disposition.comment.created_at", "hit_disposition.comment.comments", "hit_disposition.comment.updated_at","tags"

    ]
    # add_field => {
    #   "[hit_disposition][comments]" => "comments"
    # }
    
    rename => {
      # "@version" => "hit_disposition.comment"
       
      "[passenger][passenger_debarkation_lon]" => "[passenger][debarkation_coordination][lon]"
      "[passenger][passenger_debarkation_lat]" =>  "[passenger][debarkation_coordination][lat]"
      "[passenger][passenger_embarkation_lon]" => "[passenger][embarkation_coordination][lon]"
      "[passenger][passenger_embarkation_lat]" =>  "[passenger][embarkation_coordination][lat]"  

    }
  }
}


output {

  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "case"
    action => "update"
    document_id => "%{id}"
    doc_as_upsert => true
    #user => "elastic"
    #password => "changeme"
    template => "./config/cases_mapping.json"
    template_name => "case"
    template_overwrite => true
  }

# stdout {
#    codec => rubydebug 
# }

# stdout {
#    codec => json 
# }

}
