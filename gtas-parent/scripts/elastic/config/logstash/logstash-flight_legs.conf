input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://localhost:3306/gtas?sessionVariables=sql_mode=ANSI_QUOTES"
    jdbc_user => "root"
    jdbc_password => "admin"
    sql_log_level => "debug"
    jdbc_driver_library => "./config/mariadb-java-client-2.3.0.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    # statement_filepath => "./config/flight_legs.sql"
    statement => "select  
        (case when pax_b.pax_id is not null then concat(pax_b.pax_id,'+',bd.flight_id) else concat(flight_p.`passenger_id`,'+',flight_p.`flight_id`) end) 'id',   leg.id 'leg.id', leg.leg_number,
    (case when leg.`flight_id` is not null then true else false end) 'is_flight_prime',
    (case when leg.`flight_id` is null then booking_detail.full_flight_number else prime_flight.`full_flight_number` end) 'flight_number',
    (case when leg.`flight_id` is null then booking_detail.origin else prime_flight.`origin` end) 'origin',
                (case when leg.`flight_id` is null then booking_detail.destination else prime_flight.`destination` end) 'destination',
                (case when leg.`flight_id` is null then booking_detail.etd else mutable_f_detail.`full_etd_timestamp` end) 'etd',
                (case when leg.`flight_id` is null then booking_detail.eta else mutable_f_detail.`full_eta_timestamp` end) 'eta',
                (case when leg.`flight_id` is null then booking_detail.origin_country else prime_flight.`origin_country` end) 'origin_country',
                (case when leg.`flight_id` is null then booking_detail.destination_country else prime_flight.`destination_country` end) 'destination_country',
                leg.message_id,
                (case when leg.`flight_id` is null then booking_d_origin_ar.longitude else prime_f_origin_ar.longitude end) 'flight_leg.origin.lon',
    (case when leg.`flight_id` is null then booking_d_origin_ar.latitude  else  prime_f_origin_ar.latitude end) 'flight_leg.origin.lat',
    (case when leg.`flight_id` is null then booking_d_destination_ar.longitude else prime_f_destination_ar.longitude end) 'flight_leg.destination.lon',
    (case when leg.`flight_id` is null then booking_d_destination_ar.latitude else prime_f_destination_ar.latitude end) 'flight_leg.destination.lat',
    
    (case when leg.`flight_id` is null then concat(booking_d_origin_ar.latitude, ',' ,booking_d_origin_ar.longitude)  else  concat(prime_f_origin_ar.latitude, ',' , prime_f_origin_ar.latitude) end) 'flight_leg.origin.coordinates',

       (case when leg.`flight_id` is null then concat(booking_d_destination_ar.latitude, ',' ,booking_d_destination_ar.longitude) else concat(prime_f_destination_ar.longitude, ',',prime_f_destination_ar.latitude) end) 'flight_leg.destination.coordinates'
    
    from flight_leg leg

        left join flight prime_flight
            on (prime_flight.id= leg.flight_id)   
         
        left join flight_leg bd 
                on (bd.message_id = leg.message_id and bd.flight_id is not null)

        left join booking_detail booking_detail
                on(leg.`bookingDetail_id` = booking_detail.id)

        left join `flight_passenger` flight_p
                on (flight_p.`flight_id` = prime_flight.id)

        left join mutable_flight_details mutable_f_detail
        on (mutable_f_detail.flight_id = prime_flight.id)

        left join pax_booking pax_b
                                on (pax_b.booking_detail_id = booking_detail.id)
 
        left join `airport` prime_f_origin_ar 
                on (prime_f_origin_ar.iata=prime_flight.origin is not null and prime_f_origin_ar.iata=prime_flight.origin != '' and prime_f_origin_ar.iata=prime_flight.origin)

    left join `airport` booking_d_origin_ar 
                on (booking_d_origin_ar.iata=booking_detail.origin is not null and booking_d_origin_ar.iata=booking_detail.origin != '' and booking_d_origin_ar.iata=booking_detail.origin)

    left join `airport` prime_f_destination_ar 
                on (prime_f_destination_ar.iata=prime_flight.destination is not null and prime_f_destination_ar.iata=prime_flight.destination != ''  and prime_f_destination_ar.iata=prime_flight.destination)

    left join `airport` booking_d_destination_ar 
                on (booking_d_destination_ar.iata=booking_detail.destination is not null and booking_d_destination_ar.iata=booking_detail.destination != '' and booking_d_destination_ar.iata=booking_detail.destination)
       
        order by id, leg.leg_number, bd.message_id "
    schedule => "* * * * *"
    tracking_column => "leg.id"
    jdbc_paging_enabled => true
    jdbc_page_size => "10000"
  }
}

filter {
  aggregate { 
    task_id => "%{id}"
    code => "
    
    map['id'] = event.get('id')
    map['flight_legs'] ||= []

    if(event.get('message_id') != nil)
      leg_exists = map['flight_legs'].any? { |leg| leg['id'] == event.get('leg.id')  }

      # if(!leg_exists)
        map['flight_legs'].push({
          'id' => event.get('leg.id'),
          'leg_number' => event.get('leg_number'),
          'origin' => event.get('origin'),
          'flight_number' => event.get('flight_number'),
          'destination_coordination.lon' => event.get('flight_leg.destination.lon'),
          'destination_coordination.lat' => event.get('flight_leg.destination.lat'),
          'origin_coordination.lon' => event.get('flight_leg.origin.lon'),
          'origin_coordination.lat' => event.get('flight_leg.origin.lat'),
          'message_id' => event.get('message_id'),
          'etd' => event.get('etd'),
          'eta' => event.get('eta'),
          'destination' => event.get('destination'),
          'origin_country' => event.get('origin_country'),
          'destination_country' => event.get('destination_country')
          # 'origin_coordination' => event.get('flight_leg.origin.coordinates'),
          # 'destination_coordination' => event.get('flight_leg.destination.coordinates')
        })
      end
    # end
    event.cancel()
    "
    push_previous_map_as_event => true
    
    timeout => 5
    map_action => create_or_update
    timeout_tags => ["aggregate"]
    
    
  }

  mutate {
    remove_field => [ 
     "tags","flight_leg","leg_number","message_id"
    ]

  }
}

filter {
   
ruby {
       code => "
        flight_legs = []
        edges =[]
        nodes = []
        if(event.get('flight_legs') != nil)
          event.get('flight_legs').each {|k| 
              
              edge = {}
              node = {}

              edge['from'] = k['origin']
              edge['to'] = k['destination']
              edge['leg_number'] = k['leg_number']

              node['id']=k['origin']
              node['lon']=k['origin_coordination.lon']
              node['lat']=k['origin_coordination.lat']
                  
              edges << edge
              node_exists = nodes.any? { |n| n['id'] == node['id'] }
              
              if(!node_exists)
                nodes << node
              end

              node = {}
              node['id'] = k['destination']
              node['lon'] = k['destination_coordination.lon']
              node['lat'] = k['destination_coordination.lat']

              node_exists = nodes.any? { |n| n['id'] == node['id'] }
            
              if(!node_exists)
                nodes << node
              end

              if(k['origin_coordination.lon'] != nil)
                k['origin_coordination']={}
                k['origin_coordination']['lon']=k['origin_coordination.lon']
                k['origin_coordination']['lat']=k['origin_coordination.lat']
              end

              if(k['destination_coordination.lon'] != nil)
                k['destination_coordination']={}
                k['destination_coordination']['lon']=k['destination_coordination.lon']
                k['destination_coordination']['lat']=k['destination_coordination.lat']
              end

              k.delete('origin_coordination.lon')
              k.delete('origin_coordination.lat')
              k.delete('destination_coordination.lon')
              k.delete('destination_coordination.lat')

              flight_legs << k
          }
        end

        event.set('flight_legs', flight_legs)
        event.set('flight_edges', edges)
        event.set('flight_nodes', nodes)
       "
     }

}


output {

    elasticsearch {
        hosts => ["http://localhost:9200"]
        index => "flightpax"
        action => "update"
        document_id => "%{id}"
        doc_as_upsert => true
        #user => "elastic"
        #password => "changeme"
        template => "./config/flightpax_template.json"
        template_name => "flightpax_template"
        template_overwrite => true
    }

    stdout {
      codec => "rubydebug"
    }
}