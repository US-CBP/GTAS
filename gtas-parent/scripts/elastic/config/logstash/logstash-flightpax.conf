# Logstash configuration for creating a simple
# MariaDB -> Logstash -> Elasticsearch pipeline.

input {
  jdbc {
    jdbc_connection_string => "jdbc:mariadb://localhost:3306/gtas?sessionVariables=sql_mode=ANSI_QUOTES"
    jdbc_user => "root"
    jdbc_password => "admin"
    sql_log_level => "debug"
    jdbc_driver_library => "./config/mariadb-java-client-2.3.0.jar"
    jdbc_driver_class => "org.mariadb.jdbc.Driver"
    statement_filepath => "./config/flightpax_script.sql"
    schedule => "* * * * *"
    jdbc_paging_enabled => "true"
    jdbc_fetch_size => "10000"
  }


}

filter {
  
  aggregate {
    task_id => "%{id}"
    code => "
      map['id'] = event.get('id')
      map['eta'] = event.get('flight.eta')
      map['carrier'] = event.get('flight.carrier')
      map['etd'] = event.get('flight.etd')
      map['flightNumber'] = event.get('flight.flight_number')
      map['flightDate'] = event.get('flight.flight_date')
      map['residencyCountry'] = event.get('residency_country')
      map['flightId'] = event.get('flight.id')
      map['origin'] = event.get('flight.origin')
      map['citizenshipCountry'] = event.get('p_citizenship_country')
      map['debarkation'] = event.get('p_debarkation')
      map['embarkation'] = event.get('p_embarkation')
      map['gender'] = event.get('p_gender')
      map['firstName'] = event.get('first_name')
      map['middleName'] = event.get('middle_name')
      map['dob'] = event.get('p_dob')
      map['lastName'] = event.get('last_name')
      map['passengerId'] = event.get('p_id')
      map['passengerType'] = event.get('passenger_type')
      map['direction'] =event.get('flight.direction')
      map['seatNumber'] =event.get('passenger.seat_number')
      
      if(event.get('pnr') != nil)
        map['pnr'] = event.get('pnr')
      end

      if(event.get('apis') != nil)
        map['apis'] = event.get('apis')
      end

      
      map['documents'] ||= []
      map['addresses'] ||= []
      map['watchlist_match'] ||= []

      if(event.get('d_document_id') != nil)
        document_exists = map['documents'].any? { |doc| doc['id'] == event.get('d_document_id') }

        # if(!document_exists)
          map['documents'].push({
            'id' => event.get('d_document_id'),
            'documentNumber' => event.get('d_document_number'),
            'documentType' => event.get('d_document_type'),
            'expirationDate' => event.get('d_expiration_date'),
            'firstName' => event.get('first_name'),
            'issuanceCountry' => event.get('d_issuance_country'),
            'issuanceDate' => event.get('d_issuance_date'),
            'lastName' => event.get('last_name')
          })
      #   end
      end

      if(event.get('address.id') != nil)
        address_exists = map['addresses'].any? { |address| address['id'] == event.get('address.id')}

        if(!address_exists)
          map['addresses'].push({
            'id' => event.get('address.id'),
            'country' => event.get('address.country'),
            'createdAt' => event.get('address.created_at'),
            'city' => event.get('address.city'),
            'createdBy' => event.get('address.created_by'),
            'postalCode' => event.get('address.postal_code'),
            'flightPaxList' => event.get('address.flightPaxList'),
            'state' => event.get('address.state'),
            'pnrs' => event.get('address.pnrs'),
            'line1' => event.get('address.line1'),
            'line2' => event.get('address.line2'),
            'line3' => event.get('address.line3')
          })
        end
      end

      if(event.get('pax_watchlist.id') != nil)
        watchlist_exists = map['watchlist_match'].any? { |watchlist| watchlist['id'] == event.get('pax_watchlist.id')}

        if(!watchlist_exists)
          map['watchlist_match'].push({
            'id' => event.get('pax_watchlist.id'),
            'last_run_timestamp' => event.get('pax_watchlist.last_run_timestamp'),
            'passenger_id' => event.get('pax_watchlist.passenger_id'),
            'percent_match' => event.get('pax_watchlist.percent_match'),
            'verified_status' => event.get('pax_watchlist.verified_status'),
            'watchlist_item_id' => event.get('pax_watchlist.watchlist_item_id')
          })
        end
      end

    event.cancel()
    "
    push_previous_map_as_event => true
    
    timeout => 5
    map_action => create_or_update
    timeout_tags => ["aggregate"]
  }

  if "aggregate" not in [tags] {
		drop{}
	}

  mutate {
    remove_field => [ 
     "tags"
    ]
    # add_field => {
    #   "[hit_disposition][comments]" => "comments"
    # }
    
    # rename => {
    #    "documents.issuance_country" => "documents.issuanceCountry"
    # }
  }

  
}


output {

  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "flightpax"
    action => "update"
    document_id => "%{id}"
    doc_as_upsert => true
    #user => "elastic"
    #password => "changeme"
    template => "./config/flightpax_template.json"
    template_name => "flightpax_template"
    template_overwrite => true
  }

# stdout {
#    codec => "rubydebug"
# }

# stdout {
#    codec => json 
# }

}
