version: '3.7'
services:

  http-proxy: 
    image: wcogtas/http-proxy:dev
    container_name: http-proxy
    build:  
      context: ./gtas-parent
      dockerfile: docker-resources/proxy.Dockerfile
    restart: unless-stopped
    ports:
      - 443:443
      - 80:80
    networks:
      - gtas-webapp-network
    secrets:
      - elastic-bootstrap-password

  web-app:
    image: wcogtas/webapp:dev
    container_name: web-app
    build: 
      context: ./gtas-parent
      dockerfile: web-app.Dockerfile
    ports:
      - 8080:8080
      - 8443:8443
    environment:
      - KIBANA_HOST=kibana
      - NEO4J_HOST=neo4j
      - ACTIVEMQ_HOST=activemq
      - PROXY_HOST=httpproxy
      - ELASTICSEARCH=elasticsearch
    networks:
      - gtas-webapp-network
    restart: unless-stopped
    secrets:
     - mysql-webapp-user
     - mysql-webapp-password
     - webapp-neo4j-user
     - webapp-neo4j-password
     - elastic-bootstrap-password
     - source: webapp-cert
       target: /usr/local/tomcat/conf/cert/wcogtas.org.crt
     - source: webapp-key
       target: /usr/local/tomcat/conf/key/wcogtas.org.key
     - source: elastic-cert
       target: /usr/local/tomcat/conf/elastic/cert/elasticsearch-node1.crt
     - source: elastic-key
       target: /usr/local/tomcat/conf/elastic/key/elasticsearch-node1.key
     - source: elastic-ca
       target: /usr/local/tomcat/conf/elastic/ca/elastic-ca.crt
    volumes:
      - m2:/root/.m2
      - scheduler-logs:/scheduler-logs

  gtas-scheduler:
    image: wcogtas/gtas-scheduler:dev
    container_name: gtas-scheduler
    build: 
      context: .
      dockerfile: ./gtas-parent/gtas-job-scheduler-war/gtas-scheduler.Dockerfile
    restart: unless-stopped
    environment:
      KIBANA_HOST: kibana
      NEO4J_HOST: neo4j
      ACTIVEMQ_HOST: activemq
    volumes:
      - scheduler-logs:/usr/local/tomcat/logs
    secrets:
      - mysql-processor-user
      - mysql-processor-password
      - webapp-neo4j-user
      - webapp-neo4j-password
    networks:
      - gtas-webapp-network
    depends_on: 
      - activemq

  activemq:
    image: rmohr/activemq:5.15.9
    container_name: activemq
    restart: unless-stopped
    networks: 
      - gtas-webapp-network

  mariadb: 
    image: wcogtas/mariadb:dev
    build:
      context: ./gtas-parent
      dockerfile: mariadb.Dockerfile
    container_name: mariadb
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql-root-password
    secrets:
     - mysql-etl-user
     - mysql-etl-password
     - mysql-processor-user
     - mysql-processor-password
     - mysql-webapp-user
     - mysql-webapp-password
     - mysql-healthcheck-user
     - mysql-healthcheck-password
     - mysql-logstash-user
     - mysql-logstash-password
     - mysql-root-password
     - mysql-report-etl-user
     - mysql-report-etl-password
    ports:
      - 3306:3306
    networks:
      - gtas-webapp-network
    restart: unless-stopped
    volumes:
      - db-data:/var/lib/mysql

  etl-job:
    container_name: etl-job
    image: wcogtas/neo4j-etl-job:dev
    build:
      context: .
      dockerfile: ./gtas-etl-main/etl_job.Dockerfile
    environment:
      NEO4J_HOSTNAME: neo4j
      ELSEARCH_HOST_NAME: elasticsearch
      KIBANA_HOST_NAME: kibana
    restart: unless-stopped
    secrets:
      - mysql-etl-user
      - mysql-etl-password
      - etl-neo4j-user
      - etl-neo4j-password
      - mysql-report-etl-user
      - mysql-report-etl-password
      - pentaho-to-elasticsearch-user
      - pentaho-to-elasticsearch-password
      - elastic-ca
    networks: 
      - gtas-webapp-network
    depends_on: 
      - neo4j
  neo4j:
    container_name: neo4j
    image: wcogtas/neo4j:dev
    build:
      context: .
      dockerfile: ./gtas-neo4j-etl/neo4j.Dockerfile
    restart: unless-stopped
    environment:
      NEO4J_bolt_ssl__policy: "default"
      NEO4J_https_ssl__policy: "default"
      NEO4J_dbms_ssl_policy_default_client__auth: "NONE"
      NEO4J_dbms_ssl_policy_default_allow__key__generation: "false"
      NEO4J_dbms_directories_certificates: "/var/lib/neo4j/https/certificates"
      NEO4J_dbms_ssl_policy_default_base__directory: "/var/lib/neo4j/https/certificates/"
      NEO4J_dbms_ssl_policy_default_private__key: "/var/lib/neo4j/https/certificates/key/neo4j.key"
      NEO4J_dbms_ssl_policy_default_public__certificate: "/var/lib/neo4j/https/certificates/cert/neo4j.cert"
    volumes:
       - neo4j-data:/data
    secrets:
      - source: neo4j-key
        target: /var/lib/neo4j/https/certificates/key/neo4j.key
      - source: neo4j-crt
        target: /var/lib/neo4j/https/certificates/cert/neo4j.cert
    ports:
      - 7474:7474
      - 7473:7473
      - 7687:7687
    networks: 
      - gtas-webapp-network
  kibana:
    container_name: kibana
    image: wcogtas/kibana:dev
    build:
      context: ./gtas-parent/scripts/elastic
      dockerfile: install/docker/kibana/kibana.Dockerfile
    environment:
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
    ports:
      - 5601:5601
    restart: unless-stopped
    secrets:
      - source: kibana-keystore
        target: /keystore/kibana.keystore
      - source: elastic-bootstrap-password
        target: /bootstrap-password/elastic-bootstrap-password
    command:
      - bash
      - -c
      - |
        until [ $$(curl -k -s -o /dev/null -w "%{http_code}" -u kibana:$$(cat /bootstrap-password/elastic-bootstrap-password) https://elasticsearch:9200/) == 200 ]; do sleep 10 && echo "Waiting for elasticsearch..."; done
        nohup bash /usr/share/kibana/wait-for-url &
        dockerize -wait tcp://elasticsearch:9200 -timeout 1000s
        cp /keystore/kibana.keystore /usr/share/kibana/data/kibana.keystore
        /usr/local/bin/kibana-docker
    networks:
      gtas-webapp-network:
        aliases:
          - kibana.local
    depends_on:
      - elasticsearch

  elasticsearch:
    image: wcogtas/elasticsearch:dev
    container_name: elasticsearch
    build:
      context: ./gtas-parent/scripts/elastic
      dockerfile: install/docker/elasticsearch/elasticsearch.Dockerfile
    ports:
      - 9300:9300
      - 9200:9200
    restart: unless-stopped
    environment:
      BOOTSTRAP_PATH: '/bootstrap/elastic-bootstrap-password'
      KIBANA_PASSWORD_PATH: '/kibana/elasticsearch-kibana-password'
      PENTAHO_PASSWORD_PATH: '/kibana/pentaho-to-elasticsearch-password'
      ELASTIC_PATH: '/elastic/elastic-password'
    command:
      - bash
      - -c
      - |
        wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz
        tar -C /usr/local/bin -xzvf dockerize-linux-amd64-v0.6.1.tar.gz
        nohup dockerize -wait tcp://localhost:9200 -timeout 1000s  curl -k -s -H 'Content-Type:application/json' -XPUT "https://elastic:$$(cat $${BOOTSTRAP_PATH})@localhost:9200/_security/user/kibana/_password" -d "{\"password\": \"$$(cat $${KIBANA_PASSWORD_PATH})\"}" &
        nohup dockerize -wait tcp://localhost:9200 -timeout 1000s  curl -k -s -H 'Content-Type:application/json' -XPOST "https://elastic:$$(cat $${BOOTSTRAP_PATH})@localhost:9200/_security/user/pentaho_to_elastic" -d "{\"roles\" : [ \"superuser\" ],  \"password\": \"$$(cat $${PENTAHO_PASSWORD_PATH})\"}" &
        nohup dockerize -wait tcp://localhost:9200 -timeout 1000s  curl -k -s -H 'Content-Type:application/json' -XPUT "https://elastic:$$(cat $${BOOTSTRAP_PATH})@localhost:9200/_security/user/logstash_system/_password" -d "{\"password\": \"$$(cat $${ELASTIC_PATH})\"}" &
        nohup dockerize -wait tcp://localhost:9200 -timeout 1000s  curl -k -s -H 'Content-Type:application/json' -XPUT "https://elastic:$$(cat $${BOOTSTRAP_PATH})@localhost:9200/case" -d '{ "settings" : { "index" : { } }}' &
        /usr/local/bin/docker-entrypoint.sh
    secrets:
      - source: elastic-keystore
        target: /keystore/elasticsearch.keystore
      - source: pentaho-to-elasticsearch-password
        target: /kibana/pentaho-to-elasticsearch-password
      - source: elastic-bootstrap-password
        target: /bootstrap/elastic-bootstrap-password
      - source: elastic-password
        target: /elastic/elastic-password
      - source: elasticsearch-kibana-password
        target: /kibana/elasticsearch-kibana-password
      - source: elastic-ca
        target: /usr/share/elasticsearch/ca/elastic-ca.crt
      - source: elastic-cert
        target: /usr/share/elasticsearch/crt/elasticsearch-node1.crt
      - source: elastic-key
        target: /usr/share/elasticsearch/key/elasticsearch-node1.key
    volumes: 
      - es-data:/usr/share/elasticsearch/data
    networks:
      - gtas-webapp-network

  logstash:
    image: wcogtas/logstash:dev
    container_name: logstash
    build:
      context: ./gtas-parent/scripts/elastic
      dockerfile: ./install/docker/logstash/logstash.Dockerfile
    environment:
      ELASTIC_HOST: 'https://elasticsearch'
      XPACK_MONITORING_ENABLED: 'false'
      XPACK_MONITORING_ELASTICSEARCH_HOSTS: 'elasticsearch'
      LOGSTASH_KEYSTORE_PASS: 'admin123'
    command:
      - bash
      - -c
      - |
        until [ $$(curl -k -s -o /dev/null -w "%{http_code}" -u kibana:$$(cat /bootstrap-password/elastic-bootstrap-password) https://elasticsearch:9200/) == 200 ]; do sleep 10 && echo "Waiting for elasticsearch..."; done
        /usr/local/bin/docker-entrypoint
    restart: unless-stopped
    secrets:
      - elastic-ca
      - source: logstash-keystore
        target: /keystore/logstash.keystore
      - source: elastic-bootstrap-password
        target: /bootstrap-password/elastic-bootstrap-password
    networks:
      - gtas-webapp-network
    depends_on:
      - elasticsearch
#  elk-setup:
#    image: wcogtas/elk-setup:dev
#    container_name: elk-setup
#    build:
#      context: ./gtas-parent/scripts/elastic
#      dockerfile: ./install/docker/elk-setup/elk-setup.Dockerfile
#    environment:
#      KIBANA_HOST: 'kibana'
#      ELASTICSEARCH_HOST: 'elasticsearch'
#    volumes:
##      - logstash-conf:/logstash-conf
#      - kibana-conf:/kibana-conf
#      - elasticsearch-conf:/elasticsearch-conf
#    secrets:
#      - logstash-keystore-password
#      - mysql-logstash-user
#      - mysql-logstash-password
#      - elastic-password
#      - elasticsearch-kibana-user
#      - elasticsearch-kibana-password
#      - elastic-bootstrap-password
#    networks:
#      - gtas-webapp-network

secrets:
  mysql-report-etl-user:
    file: ./gtas-parent/gtas-commons/secrets/mysql_report_etl_user.txt
  mysql-report-etl-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql_report_etl_password.txt
  pentaho-to-elasticsearch-user:
    file: ./gtas-parent/gtas-commons/secrets/pentaho_to_elasticsearch_user
  pentaho-to-elasticsearch-password:
    file: ./gtas-parent/gtas-commons/secrets/pentaho_to_elasticsearch_password
  elastic-ca:
    file: ./gtas-parent/gtas-commons/certs/ca.crt
  elastic-key:
    file: ./gtas-parent/gtas-commons/certs/node1.key
  elastic-cert:
    file: ./gtas-parent/gtas-commons/certs/node1.crt
  elastic-keystore:
    file: ./gtas-parent/gtas-commons/secrets/elasticsearch.keystore
  elastic-bootstrap-password:
    file: ./gtas-parent/gtas-commons/secrets/elastic-bootstrap-password
  mysql-etl-user:
    file: ./gtas-parent/gtas-commons/secrets/mysql_etl_user.txt
  mysql-etl-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql_etl_password.txt
  mysql-healthcheck-user:
    file: ./gtas-parent/gtas-commons/secrets/mysql_healthcheck_user.txt
  mysql-healthcheck-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql_healthcheck_password.txt
  mysql-logstash-user:
    file: ./gtas-parent/gtas-commons/secrets/mysql-logstash-user
  mysql-logstash-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql-logstash-password
  mysql-processor-user:
    file: ./gtas-parent/gtas-commons/secrets/mysql_processor_user.txt
  mysql-processor-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql_processor_password.txt
  mysql-webapp-user:
    file: ./gtas-parent/gtas-commons/secrets/mysql_webapp_user.txt
  mysql-webapp-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql_webapp_password.txt
  mysql-root-password:
    file: ./gtas-parent/gtas-commons/secrets/mysql_root_password.txt
  webapp-neo4j-user:
    file: ./gtas-parent/gtas-commons/secrets/webapp_neo4j_user.txt
  webapp-neo4j-password:
    file: ./gtas-parent/gtas-commons/secrets/webapp_neo4j_password.txt
  logstash-keystore-password:
    file: ./gtas-parent/gtas-commons/secrets/logstash-keystore-password
  elastic-password:
    file: ./gtas-parent/gtas-commons/secrets/elastic-password
  elasticsearch-kibana-user:
    file: ./gtas-parent/gtas-commons/secrets/elasticsearch-kibana-user
  elasticsearch-kibana-password:
    file: ./gtas-parent/gtas-commons/secrets/elasticsearch-kibana-password
  etl-neo4j-user:
    file: ./gtas-parent/gtas-commons/secrets/etl_neo4j_user.txt
  etl-neo4j-password:
    file: ./gtas-parent/gtas-commons/secrets/etl_neo4j_password.txt
  logstash-keystore:
    file: ./gtas-parent/gtas-commons/secrets/logstash.keystore
  kibana-keystore:
    file: ./gtas-parent/gtas-commons/secrets/kibana.keystore
  webapp-cert:
    file: ./gtas-parent/gtas-commons/certs/wcogtas.org.crt
  webapp-key:
    file: ./gtas-parent/gtas-commons/certs/wcogtas.org.key
  neo4j-key:
    file: ./gtas-parent/gtas-commons/certs/neo4j/neo4j.key
  neo4j-crt:
    file: ./gtas-parent/gtas-commons/certs/neo4j/neo4j.cert
volumes:
  db-data:
  m2:
  scheduler-logs:
  certs:
  neo4j-data:
    labels:
      kompose.volume.size: 200Gi
  kibana-conf:
  elasticsearch-conf:
  es-data:
    labels:
      kompose.volume.size: 200Gi

networks:
  gtas-webapp-network:
    attachable: true