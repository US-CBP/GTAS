name: Pipeline workflow
on:
  push:
   branches:
    - dev
jobs:
  build:
    name: webapp
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: actions/checkout@master
        name: Checkout latest code
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v2
        name: Build and push GTAS rule runner image
        with:
          repository: wcogtas/gtas-rule-runner
          context: .
          platforms: linux/amd64, ppc64le
          push: true
          file: ./gtas-parent/gtas-rule-runner/gtas-rule-runner.Dockerfile
          tags: wcogtas/gtas-rule-runner:dev
      - uses: docker/build-push-action@v2
        name: Build and push GTAS web application image
        with:
          context: ./gtas-parent
          push: true
          platforms: linux/amd64, ppc64le
          file: ./gtas-parent/web-app.Dockerfile
          tags: wcogtas/webapp:dev
      - uses: docker/build-push-action@v2
        name: Build and push mariadb image
        with:
          context: ./gtas-parent
          push: true
          platforms: linux/amd64, ppc64le
          file: ./gtas-parent/mariadb.Dockerfile
          tags: wcogtas/mariadb:dev
      - uses: docker/build-push-action@v2
        name: Build and push GTAS proxy image
        with:
          context: ./gtas-parent
          push: true
          platforms: linux/amd64
          file: ./gtas-parent/docker-resources/proxy.Dockerfile
          tags: wcogtas/http-proxy:dev
      - uses: docker/build-push-action@v2
        name: Build and push GTAS scheduler image
        with:
          repository: wcogtas/gtas-scheduler
          context: .
          platforms: linux/amd64
          push: true
          file: ./gtas-parent/gtas-job-scheduler-war/gtas-scheduler.Dockerfile
          tags: wcogtas/gtas-scheduler:dev
      - uses: docker/build-push-action@v2
        name: Build and push kibana image
        with:
          platforms: linux/amd64
          push: true
          context: ./gtas-parent/scripts/elastic
          file: ./gtas-parent/scripts/elastic/install/docker/kibana/kibana.Dockerfile
          tags: wcogtas/kibana:dev
      - uses: docker/build-push-action@v2
        name: Build and push elasticsearch image
        with:
          push: true
          platforms: linux/amd64
          context: ./gtas-parent/scripts/elastic
          file: ./gtas-parent/scripts/elastic/install/docker/elasticsearch/elasticsearch.Dockerfile
          tags: wcogtas/elasticsearch:dev
      - uses: docker/build-push-action@v2
        name: Build and push logstash image
        with:
          platforms: linux/amd64
          push: true
          context: ./gtas-parent/scripts/elastic
          file: ./gtas-parent/scripts/elastic/install/docker/logstash/logstash.Dockerfile
          tags: wcogtas/logstash:dev
      - uses: docker/build-push-action@v2
        name: Build and push ELK setup image
        with:
          platforms: linux/amd64
          push: true
          context: ./gtas-parent/scripts/elastic
          file: ./gtas-parent/scripts/elastic/install/docker/elk-setup/elk-setup.Dockerfile
          tags: wcogtas/elk-setup:dev
      - uses: docker/build-push-action@v2
        name: Build and push Neo4J ETL job image
        with:
          platforms: linux/amd64
          push: true
          context: .
          file: ./gtas-etl-main/etl_job.Dockerfile
          tags: wcogtas/neo4j-etl-job:dev
      - uses: docker/build-push-action@v2
        name: Build and push Neo4J image
        with:
          platforms: linux/amd64
          push: true
          context: .
          file: ./gtas-etl-main/neo4j.Dockerfile
          tags: wcogtas/neo4j:dev
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Generate Services JSON
        uses: Consensys/kubernetes-action@master
        id: services_json
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: get services -o JSON
      - name: Generate Kubernetes deployment configuration file
        shell: bash
        env:
          SERVICES_JSON: ${{join(steps.services_json.outputs.*, '\n')}}
          EMAIL_SENDER_USERNAME: ${{ secrets.EMAIL_SENDER_USERNAME }}
          EMAIL_SENDER_PASSWORD: ${{ secrets.EMAIL_SENDER_PASSWORD }}
          EMAIL_SENDER_HOST: ${{ secrets.EMAIL_SENDER_HOST }}
          NEO4J_HOST: ${{ secrets.NEO4J_HOST }}
          NEO4J_BOLT: ${{ secrets.NEO4J_BOLT }}
          MARIADB_HOST: ${{ secrets.MARIADB_HOST }}
          MARIADB_USER: ${{ secrets.MARIADB_USER }}
          MARIADB_PASS: ${{ secrets.MARIADB_PASS }}
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
        run: |
          echo "${{ secrets.LOGSTASH_KEYSTORE  }}" > ./logstash.keystore.asc
          gpg -d --passphrase "${{ secrets.PGP_PASSWORD }}" --batch ./logstash.keystore.asc > ./gtas-parent/gtas-commons/secrets/logstash.keystore
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql_etl_user.txt
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql_etl_password.txt
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql-logstash-user
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql-logstash-password
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql_processor_user.txt
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql_processor_password.txt
          echo $MARIADB_USER > ./gtas-parent/gtas-commons/secrets/mysql_webapp_user.txt
          echo $MARIADB_PASS > ./gtas-parent/gtas-commons/secrets/mysql_webapp_password.txt


          sudo apt-get -y update
          sudo apt-get install -y curl
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.22.0/kompose-linux-amd64 -o kompose
          chmod +x kompose
          sudo mv ./kompose /usr/local/bin/kompose
          kompose -f pipeline-deployment.yaml -f docker-compose.yml convert -j --out deploy.json

          IP=$(echo $SERVICES_JSON | jq -r '.items[] | select(.metadata.name=="kibana") | .spec.clusterIP')

          cat deploy.json | jq -r '.items[] | select(.kind=="Deployment" and .metadata.name=="etl-job") | .spec.template.spec.hostAliases += [{"ip":"'$IP'","hostnames":["kibana.local"]}] '> alias.json
          cat deploy.json | jq -r 'del(.items[] | select(.kind=="Deployment" and .metadata.name=="etl-job"))' > temp.json
          jq '.items += [input]' temp.json alias.json > combined-deploy.json
      - name: Clean resources
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: delete deployments --ignore-not-found=true activemq elasticsearch etl-job gtas-scheduler http-proxy kibana logstash mariadb neo4j web-app rule-runner
      - name: Deploy to cluster
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: apply -f combined-deploy.json
